import * as vscode from 'vscode';
import { AIService } from '../services/aiService';

export class CodeCompletionProvider implements vscode.CompletionItemProvider {
    private aiService: AIService;

    constructor() {
        this.aiService = AIService.getInstance();
    }

    async provideCompletionItems(
        document: vscode.TextDocument,
        position: vscode.Position,
        token: vscode.CancellationToken,
        context: vscode.CompletionContext
    ): Promise<vscode.CompletionItem[]> {
        const linePrefix = document.lineAt(position).text.substr(0, position.character);
        
        try {
            // Get completions from AI service
            const response = await this.aiService.generateCode(`Complete this code:\n${linePrefix}`);
            const completions = response.text.split('\n').filter(line => line.trim());
            
            return completions.map(completion => {
                const item = new vscode.CompletionItem(completion, vscode.CompletionItemKind.Snippet);
                item.detail = 'AI-generated completion';
                item.documentation = new vscode.MarkdownString('Generated by AI model');
                return item;
            });
        } catch (error) {
            // Fallback to local completions if AI service fails
            return this.getLocalCompletions(linePrefix);
        }
    }

    private getLocalCompletions(prefix: string): vscode.CompletionItem[] {
        // Common code snippets and completions
        const snippets = [
            {
                label: 'function',
                detail: 'Create a new function',
                documentation: 'Creates a new function with the specified name',
                insertText: 'function ${1:name}(${2:params}) {\n\t${3}\n}'
            },
            {
                label: 'class',
                detail: 'Create a new class',
                documentation: 'Creates a new class with constructor',
                insertText: 'class ${1:name} {\n\tconstructor(${2:params}) {\n\t\t${3}\n\t}\n}'
            },
            {
                label: 'if',
                detail: 'Create an if statement',
                documentation: 'Creates a new if statement block',
                insertText: 'if (${1:condition}) {\n\t${2}\n}'
            },
            {
                label: 'for',
                detail: 'Create a for loop',
                documentation: 'Creates a new for loop',
                insertText: 'for (let ${1:i} = 0; ${1:i} < ${2:length}; ${1:i}++) {\n\t${3}\n}'
            }
        ];

        return snippets
            .filter(snippet => snippet.label.startsWith(prefix))
            .map(snippet => {
                const item = new vscode.CompletionItem(snippet.label, vscode.CompletionItemKind.Snippet);
                item.detail = snippet.detail;
                item.documentation = new vscode.MarkdownString(snippet.documentation);
                item.insertText = new vscode.SnippetString(snippet.insertText);
                return item;
            });
    }
} 