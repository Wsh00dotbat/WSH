"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodeCompletionProvider = void 0;
const vscode = __importStar(require("vscode"));
const aiService_1 = require("../services/aiService");
class CodeCompletionProvider {
    constructor() {
        this.aiService = aiService_1.AIService.getInstance();
    }
    async provideCompletionItems(document, position, token, context) {
        const linePrefix = document.lineAt(position).text.substr(0, position.character);
        try {
            // Get completions from AI service
            const response = await this.aiService.generateCode(`Complete this code:\n${linePrefix}`);
            const completions = response.text.split('\n').filter(line => line.trim());
            return completions.map(completion => {
                const item = new vscode.CompletionItem(completion, vscode.CompletionItemKind.Snippet);
                item.detail = 'AI-generated completion';
                item.documentation = new vscode.MarkdownString('Generated by AI model');
                return item;
            });
        }
        catch (error) {
            // Fallback to local completions if AI service fails
            return this.getLocalCompletions(linePrefix);
        }
    }
    getLocalCompletions(prefix) {
        // Common code snippets and completions
        const snippets = [
            {
                label: 'function',
                detail: 'Create a new function',
                documentation: 'Creates a new function with the specified name',
                insertText: 'function ${1:name}(${2:params}) {\n\t${3}\n}'
            },
            {
                label: 'class',
                detail: 'Create a new class',
                documentation: 'Creates a new class with constructor',
                insertText: 'class ${1:name} {\n\tconstructor(${2:params}) {\n\t\t${3}\n\t}\n}'
            },
            {
                label: 'if',
                detail: 'Create an if statement',
                documentation: 'Creates a new if statement block',
                insertText: 'if (${1:condition}) {\n\t${2}\n}'
            },
            {
                label: 'for',
                detail: 'Create a for loop',
                documentation: 'Creates a new for loop',
                insertText: 'for (let ${1:i} = 0; ${1:i} < ${2:length}; ${1:i}++) {\n\t${3}\n}'
            }
        ];
        return snippets
            .filter(snippet => snippet.label.startsWith(prefix))
            .map(snippet => {
            const item = new vscode.CompletionItem(snippet.label, vscode.CompletionItemKind.Snippet);
            item.detail = snippet.detail;
            item.documentation = new vscode.MarkdownString(snippet.documentation);
            item.insertText = new vscode.SnippetString(snippet.insertText);
            return item;
        });
    }
}
exports.CodeCompletionProvider = CodeCompletionProvider;
//# sourceMappingURL=CodeCompletionProvider.js.map